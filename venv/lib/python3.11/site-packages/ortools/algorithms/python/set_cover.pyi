class ElementDegreeSolutionGenerator:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def next_solution(self) -> bool: ...

class GreedySolutionGenerator:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def next_solution(self) -> bool: ...

class GuidedLocalSearch:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def initialize(self) -> None: ...
    def next_solution(self, arg0: int) -> bool: ...

class Preprocessor:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def next_solution(self) -> bool: ...
    def num_columns_fixed_by_singleton_row(self) -> int: ...

class RandomSolutionGenerator:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def next_solution(self) -> bool: ...

class SetCoverInvariant:
    model: SetCoverModel
    def __init__(self, arg0: SetCoverModel) -> None: ...
    def check_consistency(self) -> bool: ...
    def clear(self) -> None: ...
    def clear_removability_information(self) -> None: ...
    def clear_trace(self) -> None: ...
    def compress_trace(self) -> None: ...
    def cost(self) -> float: ...
    def deselect(self, subset: int) -> None: ...
    def deselect_and_fully_update(self, subset: int) -> None: ...
    def export_solution_as_proto(self, *args, **kwargs): ...
    def flip(self, subset: int) -> None: ...
    def flip_and_fully_update(self, subset: int) -> None: ...
    def import_solution_from_proto(self, arg0) -> None: ...
    def initialize(self) -> None: ...
    def num_uncovered_elements(self) -> int: ...
    def recompute_invariant(self) -> None: ...
    def select(self, subset: int) -> None: ...
    def select_and_fully_update(self, subset: int) -> None: ...

class SetCoverModel:
    def __init__(self) -> None: ...
    def add_element_to_last_subset(self, element: int) -> None: ...
    def add_element_to_subset(self, subset: int, cost: int) -> None: ...
    def add_empty_subset(self, cost: float) -> None: ...
    def compute_feasibility(self) -> bool: ...
    def export_model_as_proto(self, *args, **kwargs): ...
    def import_model_from_proto(self, arg0) -> None: ...
    def reserve_num_elements_in_subset(self, num_elements: int, subset: int) -> None: ...
    def reserve_num_subsets(self, num_subsets: int) -> None: ...
    def set_subset_cost(self, subset: int, cost: float) -> None: ...
    @property
    def fill_rate(self) -> float: ...
    @property
    def num_elements(self) -> int: ...
    @property
    def num_nonzeros(self) -> int: ...
    @property
    def num_subsets(self) -> int: ...

class SteepestSearch:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def next_solution(self, arg0: int) -> bool: ...

class TrivialSolutionGenerator:
    def __init__(self, arg0: SetCoverInvariant) -> None: ...
    def next_solution(self) -> bool: ...

def read_beasly_set_cover_problem(arg0: str) -> SetCoverModel: ...
def read_rail_set_cover_problem(arg0: str) -> SetCoverModel: ...
