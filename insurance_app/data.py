# data.py
import pandas as pd
from .config import CREDIT_RATING_MAPPING


def load_data():
    # Raw data for quotes (same as provided)
    data = {
        "QuoteID": [
            "Quote 1",
            "Quote 2",
            "Quote 3",
            "Quote 4",
            "Quote 5",
            "Quote 6",
            "Quote 7",
            "Quote 8",
            "Quote 9",
            "Quote 10",
            "Quote 11",
            "Quote 12",
            "Quote 13",
            "Quote 14",
            "Quote 15",
            "Quote 16",
            "Quote 17",
            "Quote 18",
            "Quote 19",
            "Quote 20",
            "Quote 21",
            "Quote 22",
            "Quote 23",
            "Quote 24",
            "Quote 25",
            "Quote 26",
            "Quote 27",
            "Quote 28",
            "Quote 29",
            "Quote 30",
        ],
        "Carrier": [
            "AIG",
            "Allianz",
            "AXA",
            "Zurich",
            "Chubb",
            "Liberty",
            "Berkshire",
            "Travelers",
            "Munich Re",
            "Swiss Re",
            "Hannover Re",
            "SCOR",
            "Partner Re",
            "Renaissance Re",
            "Arch Capital",
            "Axis Capital",
            "AIG",
            "Endurance",
            "Aspen Re",
            "Validus",
            "Chubb",
            "Catlin",
            "Allied World",
            "Hiscox",
            "Amlin",
            "Beazley",
            "AXA",
            "Brit",
            "MS Amlin",
            "XL Catlin",
        ],
        "Layer": [
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "Primary $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $10M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
            "$10M xs $20M",
        ],
        "Premium": [
            1243213,
            1020361,
            1118486,
            1218843,
            1022174,
            1278701,
            1110417,
            1039896,
            1289711,
            1277751,
            876440,
            928673,
            968621,
            887314,
            820072,
            832378,
            895831,
            803424,
            998271,
            912313,
            635167,
            668959,
            698410,
            717871,
            679425,
            664197,
            606473,
            794058,
            664465,
            775569,
        ],
        "Capacity": [
            2,
            4,
            3,
            5,
            4,
            5,
            6,
            2,
            1,
            2,
            2,
            5,
            4,
            5,
            3,
            2,
            3,
            4,
            5,
            3,
            3,
            1,
            4,
            2,
            4,
            2,
            1,
            3,
            3,
            5,
        ],
        "Coverage_Score": [
            0.97,
            0.93,
            0.80,
            0.91,
            0.83,
            0.82,
            0.92,
            0.98,
            0.95,
            0.94,
            0.78,
            0.93,
            0.75,
            1.00,
            0.76,
            0.90,
            0.89,
            1.00,
            0.97,
            0.86,
            0.91,
            0.86,
            0.87,
            0.80,
            0.77,
            0.87,
            0.86,
            0.81,
            0.77,
            0.82,
        ],
        "Preferred": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
        ],
        "CreditRating": [
            "A",
            "A",
            "A",
            "B",
            "AA",
            "B",
            "A",
            "A",
            "A",
            "A",
            "B",
            "A",
            "B",
            "A",
            "A",
            "AA",
            "A",
            "AA",
            "AA",
            "B",
            "B",
            "AA",
            "AA",
            "B",
            "B",
            "B",
            "A",
            "B",
            "AA",
            "AA",
        ],
        "CreditRatingValue": [
            2,
            2,
            2,
            1,
            3,
            1,
            2,
            2,
            2,
            2,
            1,
            2,
            1,
            2,
            2,
            3,
            2,
            3,
            3,
            1,
            1,
            3,
            3,
            1,
            1,
            1,
            2,
            1,
            3,
            3,
        ],
    }
    df = pd.DataFrame(data)

    # Convert Capacity to dollars
    df["Capacity"] = df["Capacity"] * 1e6

    # Update each quote's credit rating: for each carrier, take the maximum CreditRatingValue
    df["CreditRatingValue"] = df.groupby("Carrier")["CreditRatingValue"].transform(
        "max"
    )
    df["CreditRating"] = df["CreditRatingValue"].map(CREDIT_RATING_MAPPING)

    return df


def compute_dynamic_ranges(df):
    # Compute dynamic premium range per layer (using min and max across layers)
    layers = df["Layer"].unique()
    min_premiums = []
    max_premiums = []
    for layer in layers:
        layer_data = df[df["Layer"] == layer]
        min_premiums.append(layer_data["Premium"].min())
        max_premiums.append(layer_data["Premium"].max())

    # Overall premium range (sum over layers)
    premium_min_bound = sum(min_premiums)
    premium_max_bound = sum(max_premiums)

    # Coverage score range (across all quotes)
    coverage_min = df["Coverage_Score"].min()
    coverage_max = df["Coverage_Score"].max()

    return premium_min_bound, premium_max_bound, coverage_min, coverage_max
